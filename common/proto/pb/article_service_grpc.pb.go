// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.0--rc1
// source: article_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArticleSericeClient is the client API for ArticleSerice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleSericeClient interface {
	GetArticlesFeed(ctx context.Context, in *GetArticlesFeedRequest, opts ...grpc.CallOption) (*MultipleArticlesResponse, error)
	GetArticles(ctx context.Context, in *GetArticlesRequest, opts ...grpc.CallOption) (*MultipleArticlesResponse, error)
	CreateArticle(ctx context.Context, in *NewArticleRequest, opts ...grpc.CallOption) (*SingleArticleResponse, error)
	GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*SingleArticleResponse, error)
	UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*SingleArticleResponse, error)
	DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetArticleComments(ctx context.Context, in *GetArticleCommentsRequest, opts ...grpc.CallOption) (*MultipleCommentsResponse, error)
	CreateArticleComment(ctx context.Context, in *NewCommentRequest, opts ...grpc.CallOption) (*SingleCommentResponse, error)
	DeleteArticleComment(ctx context.Context, in *DeleteArticleCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateArticleFavorite(ctx context.Context, in *CreateArticleFavoriteRequest, opts ...grpc.CallOption) (*SingleArticleResponse, error)
	DeleteArticleFavorite(ctx context.Context, in *DeleteArticleFavoriteRequest, opts ...grpc.CallOption) (*SingleArticleResponse, error)
	GetTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TagsResponse, error)
}

type articleSericeClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleSericeClient(cc grpc.ClientConnInterface) ArticleSericeClient {
	return &articleSericeClient{cc}
}

func (c *articleSericeClient) GetArticlesFeed(ctx context.Context, in *GetArticlesFeedRequest, opts ...grpc.CallOption) (*MultipleArticlesResponse, error) {
	out := new(MultipleArticlesResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleSerice/GetArticlesFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSericeClient) GetArticles(ctx context.Context, in *GetArticlesRequest, opts ...grpc.CallOption) (*MultipleArticlesResponse, error) {
	out := new(MultipleArticlesResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleSerice/GetArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSericeClient) CreateArticle(ctx context.Context, in *NewArticleRequest, opts ...grpc.CallOption) (*SingleArticleResponse, error) {
	out := new(SingleArticleResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleSerice/CreateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSericeClient) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*SingleArticleResponse, error) {
	out := new(SingleArticleResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleSerice/GetArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSericeClient) UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*SingleArticleResponse, error) {
	out := new(SingleArticleResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleSerice/UpdateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSericeClient) DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/article.ArticleSerice/DeleteArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSericeClient) GetArticleComments(ctx context.Context, in *GetArticleCommentsRequest, opts ...grpc.CallOption) (*MultipleCommentsResponse, error) {
	out := new(MultipleCommentsResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleSerice/GetArticleComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSericeClient) CreateArticleComment(ctx context.Context, in *NewCommentRequest, opts ...grpc.CallOption) (*SingleCommentResponse, error) {
	out := new(SingleCommentResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleSerice/CreateArticleComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSericeClient) DeleteArticleComment(ctx context.Context, in *DeleteArticleCommentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/article.ArticleSerice/DeleteArticleComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSericeClient) CreateArticleFavorite(ctx context.Context, in *CreateArticleFavoriteRequest, opts ...grpc.CallOption) (*SingleArticleResponse, error) {
	out := new(SingleArticleResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleSerice/CreateArticleFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSericeClient) DeleteArticleFavorite(ctx context.Context, in *DeleteArticleFavoriteRequest, opts ...grpc.CallOption) (*SingleArticleResponse, error) {
	out := new(SingleArticleResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleSerice/DeleteArticleFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSericeClient) GetTags(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TagsResponse, error) {
	out := new(TagsResponse)
	err := c.cc.Invoke(ctx, "/article.ArticleSerice/GetTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleSericeServer is the server API for ArticleSerice service.
// All implementations must embed UnimplementedArticleSericeServer
// for forward compatibility
type ArticleSericeServer interface {
	GetArticlesFeed(context.Context, *GetArticlesFeedRequest) (*MultipleArticlesResponse, error)
	GetArticles(context.Context, *GetArticlesRequest) (*MultipleArticlesResponse, error)
	CreateArticle(context.Context, *NewArticleRequest) (*SingleArticleResponse, error)
	GetArticle(context.Context, *GetArticleRequest) (*SingleArticleResponse, error)
	UpdateArticle(context.Context, *UpdateArticleRequest) (*SingleArticleResponse, error)
	DeleteArticle(context.Context, *DeleteArticleRequest) (*emptypb.Empty, error)
	GetArticleComments(context.Context, *GetArticleCommentsRequest) (*MultipleCommentsResponse, error)
	CreateArticleComment(context.Context, *NewCommentRequest) (*SingleCommentResponse, error)
	DeleteArticleComment(context.Context, *DeleteArticleCommentRequest) (*emptypb.Empty, error)
	CreateArticleFavorite(context.Context, *CreateArticleFavoriteRequest) (*SingleArticleResponse, error)
	DeleteArticleFavorite(context.Context, *DeleteArticleFavoriteRequest) (*SingleArticleResponse, error)
	GetTags(context.Context, *emptypb.Empty) (*TagsResponse, error)
	mustEmbedUnimplementedArticleSericeServer()
}

// UnimplementedArticleSericeServer must be embedded to have forward compatible implementations.
type UnimplementedArticleSericeServer struct {
}

func (UnimplementedArticleSericeServer) GetArticlesFeed(context.Context, *GetArticlesFeedRequest) (*MultipleArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticlesFeed not implemented")
}
func (UnimplementedArticleSericeServer) GetArticles(context.Context, *GetArticlesRequest) (*MultipleArticlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticles not implemented")
}
func (UnimplementedArticleSericeServer) CreateArticle(context.Context, *NewArticleRequest) (*SingleArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedArticleSericeServer) GetArticle(context.Context, *GetArticleRequest) (*SingleArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedArticleSericeServer) UpdateArticle(context.Context, *UpdateArticleRequest) (*SingleArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticleSericeServer) DeleteArticle(context.Context, *DeleteArticleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedArticleSericeServer) GetArticleComments(context.Context, *GetArticleCommentsRequest) (*MultipleCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleComments not implemented")
}
func (UnimplementedArticleSericeServer) CreateArticleComment(context.Context, *NewCommentRequest) (*SingleCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticleComment not implemented")
}
func (UnimplementedArticleSericeServer) DeleteArticleComment(context.Context, *DeleteArticleCommentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticleComment not implemented")
}
func (UnimplementedArticleSericeServer) CreateArticleFavorite(context.Context, *CreateArticleFavoriteRequest) (*SingleArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticleFavorite not implemented")
}
func (UnimplementedArticleSericeServer) DeleteArticleFavorite(context.Context, *DeleteArticleFavoriteRequest) (*SingleArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticleFavorite not implemented")
}
func (UnimplementedArticleSericeServer) GetTags(context.Context, *emptypb.Empty) (*TagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTags not implemented")
}
func (UnimplementedArticleSericeServer) mustEmbedUnimplementedArticleSericeServer() {}

// UnsafeArticleSericeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleSericeServer will
// result in compilation errors.
type UnsafeArticleSericeServer interface {
	mustEmbedUnimplementedArticleSericeServer()
}

func RegisterArticleSericeServer(s grpc.ServiceRegistrar, srv ArticleSericeServer) {
	s.RegisterService(&ArticleSerice_ServiceDesc, srv)
}

func _ArticleSerice_GetArticlesFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticlesFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSericeServer).GetArticlesFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleSerice/GetArticlesFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSericeServer).GetArticlesFeed(ctx, req.(*GetArticlesFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSerice_GetArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSericeServer).GetArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleSerice/GetArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSericeServer).GetArticles(ctx, req.(*GetArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSerice_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSericeServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleSerice/CreateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSericeServer).CreateArticle(ctx, req.(*NewArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSerice_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSericeServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleSerice/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSericeServer).GetArticle(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSerice_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSericeServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleSerice/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSericeServer).UpdateArticle(ctx, req.(*UpdateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSerice_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSericeServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleSerice/DeleteArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSericeServer).DeleteArticle(ctx, req.(*DeleteArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSerice_GetArticleComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSericeServer).GetArticleComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleSerice/GetArticleComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSericeServer).GetArticleComments(ctx, req.(*GetArticleCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSerice_CreateArticleComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSericeServer).CreateArticleComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleSerice/CreateArticleComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSericeServer).CreateArticleComment(ctx, req.(*NewCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSerice_DeleteArticleComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSericeServer).DeleteArticleComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleSerice/DeleteArticleComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSericeServer).DeleteArticleComment(ctx, req.(*DeleteArticleCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSerice_CreateArticleFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSericeServer).CreateArticleFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleSerice/CreateArticleFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSericeServer).CreateArticleFavorite(ctx, req.(*CreateArticleFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSerice_DeleteArticleFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSericeServer).DeleteArticleFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleSerice/DeleteArticleFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSericeServer).DeleteArticleFavorite(ctx, req.(*DeleteArticleFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSerice_GetTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSericeServer).GetTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/article.ArticleSerice/GetTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSericeServer).GetTags(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleSerice_ServiceDesc is the grpc.ServiceDesc for ArticleSerice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleSerice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.ArticleSerice",
	HandlerType: (*ArticleSericeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticlesFeed",
			Handler:    _ArticleSerice_GetArticlesFeed_Handler,
		},
		{
			MethodName: "GetArticles",
			Handler:    _ArticleSerice_GetArticles_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _ArticleSerice_CreateArticle_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _ArticleSerice_GetArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _ArticleSerice_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _ArticleSerice_DeleteArticle_Handler,
		},
		{
			MethodName: "GetArticleComments",
			Handler:    _ArticleSerice_GetArticleComments_Handler,
		},
		{
			MethodName: "CreateArticleComment",
			Handler:    _ArticleSerice_CreateArticleComment_Handler,
		},
		{
			MethodName: "DeleteArticleComment",
			Handler:    _ArticleSerice_DeleteArticleComment_Handler,
		},
		{
			MethodName: "CreateArticleFavorite",
			Handler:    _ArticleSerice_CreateArticleFavorite_Handler,
		},
		{
			MethodName: "DeleteArticleFavorite",
			Handler:    _ArticleSerice_DeleteArticleFavorite_Handler,
		},
		{
			MethodName: "GetTags",
			Handler:    _ArticleSerice_GetTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "article_service.proto",
}
